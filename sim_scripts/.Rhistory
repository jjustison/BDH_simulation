while(time<1){
n<-n+1
if(time<0.5){
dt<-rexp(n*lambda+in1)
}else{
dt<-rexp(n*lambda+in2)
}
time<-time+dt
}
return(n)
}
bd_pro<-function(lambda,in1,in2){
n<-1
time<-0
dt<-rexp(n*lambda+in1)
time<-time+dt
while(time<1){
n<-n+1
if(time<0.5){
dt<-rexp(n*lambda+in1)
}else{
dt<-rexp(n*lambda+in2)
}
time<-time+dt
}
return(n)
}
bd_pro(5,1,1)
?rexp
bd_pro<-function(lambda,in1,in2){
n<-1
time<-0
dt<-rexp(1,n*lambda+in1)
time<-time+dt
while(time<1){
n<-n+1
if(time<0.5){
dt<-rexp(1,n*lambda+in1)
}else{
dt<-rexp(1,n*lambda+in2)
}
time<-time+dt
}
return(n)
}
bd_pro(5,1,1)
bd_pro(5,1,1)
bd_pro(5,1,1)
bd_pro(5,1,1)
bd_pro(5,1,1)
bd_pro(5,1,1)
bd_pro(5,1,1)
bd_pro(5,1,1)
bd_pro(5,1,1)
nreps<-10000
sims1<-rep(NA,nreps)
sims2<-rep(NA,nreps)
for(i in 1:nreps){
sims1[i]<-bd_pro(5,1,1)
sims1[i]<-bd_pro(5,2,0.5)
}
nreps<-10000
sims1<-rep(NA,nreps)
sims2<-rep(NA,nreps)
for(i in 1:nreps){
sims1[i]<-bd_pro(5,1,1)
sims2[i]<-bd_pro(5,2,0.5)
}
mean(sims1)
mean(sims2)
nreps<-10000
sims1<-rep(NA,nreps)
sims2<-rep(NA,nreps)
for(i in 1:nreps){
sims1[i]<-bd_pro(5,1,1)
sims2[i]<-bd_pro(5,0.5,2)
}
mean(sims1)
mean(sims2)
nreps<-100000
sims1<-rep(NA,nreps)
sims2<-rep(NA,nreps)
for(i in 1:nreps){
sims1[i]<-bd_pro(5,1,1)
sims2[i]<-bd_pro(5,0.5,2)
}
mean(sims1)
mean(sims2)
library(tanggle)
cite("tanggle")
citation("tanggle")
(i(*2)-1,i*2)
((i*2)-1,i*2)
c((i*2)-1,i*2)
for(i in 1:3){print(c(i(*2)-1,i*2))}
for(i in 1:3){print(c((i*2)-1,i*2))}
pi/3
demo()
demo('recursion')
HydromantesMns <- read.csv("C:/Users/justison/Downloads/HydromantesMns.csv")
View(HydromantesMns)
c(4,5,"abc")
a<-c(4,5,"abc")
?runif
iris
a<-1:100
view(a)
View(a)
coffee_hour_list <- read.csv("~/coffee_hour_list.xlsx", sep="")
View(coffee_hour_list)
library(ape)
e
exp()
exp(1)
?Constants
pi
exp()
exp(1)
pi*3^2
pi*(3^2)
(pi*3)^2
5-2*6
(5-2)*6
number_people <- 15
number_people + 5
number_people *2
no_cats <- 5
no_cats * 2
no_cats + 2
no_cats
no_dogs <- 3
cats <- 3
dogs <- 2
animals <- cats + dogs
animals
dogs <- 5
animals
dogs+2
dogs
my_name <- "Josh"
my_name + 2
my_name * 2
my_name <- 'Josh'
my_name
class(my_name)
class(dogs)
class(TRUE)
c(4,7, 8)
ages<- c(21,18,81)
ages
ages
student_names <- c("Omar","Claire", "Heather")
student_names
names(ages) <- student_names
ages
type_conversion <- c(23, 45, "Josh", 64)
type_conversion
ages
ages * 4
ages + 4
years<- 3
ages + years
years<- c(1,2,3)
ages + years
iris
head(iris)
iris[2,3]
iris[5,1]
?runif
runif(min = 2, max = 5, n = 3)
runif(min = 2, max = 5, n = 7)
runif(2,5,7)
head(iris)
names(iris)
iris$Sepal.Width
iris$Species
iris$Species[1]
as.character(iris$Species)
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Petal.Length)
plot(iris$Sepal.Length,iris$Petal.Width)
plot(iris$Petal.Length,iris$Petal.Width)
library(aoe)
library(ape)
tree<-rcoal(5)
tree
tree$edge.length
tree$edge
plot(tree)
edgelabels()
nodelabels()
tiplabels()
tree<-rcoal(5)
plot(tree)
edgelabels()
tiplabels()
nodelabels()
tree$edge
tree$edge.length
edgelabels(round(tree$edge.length,3))
plot(tree)
tiplabels(offset = 0.5)
tiplabels(offset = 0.2)
tiplabels(offset = 0.02)
tiplabels(offset = 0.05)
plot(tree)
tiplabels(offset = 0.05)
tree$tip.label
tree$Nnode
nodelabels()
tree$edge
tree$edge[1,]
tree$edge[,2]
tree$edge[4,2]
tree$edge.length
tree$edge.length[5]
tree$tip.label
tree$tip.label[3]
write.tree(tree)
knitr::opts_chunk$set(echo = TRUE)
nlayers<-11
npoints<-61
hyb_pos<-rep(NA,npoints)
hyb_neu<-rep(NA,npoints)
hyb_neg<-rep(NA,npoints)
i<-0
layer_space<-1/(nlayers-1)
for(div in seq(from=-1,to=1,length.out=nlayers)){
leftover<-1-abs(div)
hyb_zero<-seq(0,leftover,by=layer_space)
leftover_leftover<-leftover-hyb_zero
hyb_plus<- (div+1-hyb_zero)/2
hyb_minus<-hyb_plus-div
nvals<-length(hyb_minus)
hyb_pos[(i+1):(i+nvals)]<-hyb_plus
hyb_neg[(i+1):(i+nvals)]<-hyb_minus
hyb_neu[(i+1):(i+nvals)]<-hyb_zero
i<-i+nvals
}
dat<-data.frame(hyb_pos,hyb_neg,hyb_neu)
library(Ternary)
library(Ternary)
library(tidyr)
library(dplyr)
path<-'../data'
nsims<-61
col_names<- c('rets'	,'tips','level','tree_child','tree_based','fu_stable','gen_no','degen_no','neu_no','recon','row_num')
my_frame<-as.data.frame(matrix(NA,nrow = 20000*nsims,ncol=length(col_names)))
frame2<-as.data.frame(matrix(NA,nrow = 10000*nsims,ncol=3))
colnames(frame2)<-c('rets','tips')
count<-0
n1<-rep(NA,nsims)
n2<-rep(NA,nsims)
n3<-rep(NA,nsims)
file_name_base<-paste(path,'/simplex/',sep='')
rows<-1:nsims
for(rw in rows){
file_name<-paste(file_name_base,'row_',rw,'/phydata.csv',sep = '')
dat <- read.csv(file =file_name)[,-1]
nrows<-nrow(dat)
frame2$rets[((count*nrows)+1):((count+1)*nrows)]<-dat$rec_rets/dat$rets
frame2$tips[((count*nrows)+1):((count+1)*nrows)]<-dat$rec_tips/dat$tips
frame2$row_num[((count*nrows)+1):((count+1)*nrows)] <-rw
to_bind<-dat[,10:18]
dat<-dat[,-(10:18)]
colnames(to_bind)<-colnames(dat)
recon<-c(rep(F,nrows),rep(T,nrows))
row_row<-rep(rw,2*nrows)
dat<-rbind(dat,to_bind)
dat<-cbind(dat,recon,row_row)
my_frame[((count*2*nrows)+1):((count+1)*2*nrows),]<-dat
count<-count+1
}
for(rw in rows){
file_name<-paste(file_name_base,'row_',rw,'/phydata.csv',sep = '')
dat <- read.csv(file =file_name)[,-1]
nrows<-nrow(dat)
frame2$rets[((count*nrows)+1):((count+1)*nrows)]<-dat$rec_rets/dat$rets
frame2$tips[((count*nrows)+1):((count+1)*nrows)]<-dat$rec_tips/dat$tips
frame2$row_num[((count*nrows)+1):((count+1)*nrows)] <-rw
to_bind<-dat[,10:18]
dat<-dat[,-(10:18)]
colnames(to_bind)<-colnames(dat)
recon<-c(rep(F,nrows),rep(T,nrows))
row_row<-rep(rw,2*nrows)
dat<-rbind(dat,to_bind)
dat<-cbind(dat,recon,row_row)
my_frame[((count*2*nrows)+1):((count+1)*2*nrows),]<-dat
count<-count+1
}
i<-0
layer_space<-1/(nlayers-1)
col_names<- c('rets'	,'tips','level','tree_child','tree_based','fu_stable','gen_no','degen_no','neu_no','recon','row_num')
my_frame<-as.data.frame(matrix(NA,nrow = 20000*nsims,ncol=length(col_names)))
colnames(my_frame)<- col_names
frame2<-as.data.frame(matrix(NA,nrow = 10000*nsims,ncol=3))
colnames(frame2)<-c('rets','tips')
count<-0
n1<-rep(NA,nsims)
n2<-rep(NA,nsims)
n3<-rep(NA,nsims)
file_name_base<-paste(path,'/simplex/',sep='')
rows<-1:nsims
for(rw in rows){
file_name<-paste(file_name_base,'row_',rw,'/phydata.csv',sep = '')
dat <- read.csv(file =file_name)[,-1]
nrows<-nrow(dat)
frame2$rets[((count*nrows)+1):((count+1)*nrows)]<-dat$rec_rets/dat$rets
frame2$tips[((count*nrows)+1):((count+1)*nrows)]<-dat$rec_tips/dat$tips
frame2$row_num[((count*nrows)+1):((count+1)*nrows)] <-rw
to_bind<-dat[,10:18]
dat<-dat[,-(10:18)]
colnames(to_bind)<-colnames(dat)
recon<-c(rep(F,nrows),rep(T,nrows))
row_row<-rep(rw,2*nrows)
dat<-rbind(dat,to_bind)
dat<-cbind(dat,recon,row_row)
my_frame[((count*2*nrows)+1):((count+1)*2*nrows),]<-dat
count<-count+1
}
my_frame$rets[is.nan(my_frame$rets)]<-0
my_frame<-as_tibble(my_frame)
summed<- my_frame %>%
group_by(row_num,recon) %>%
summarize(tc = sum(tree_child)/n(),
tb = sum(tree_based)/n(),
fus= sum(fu_stable)/n(),
ratio = mean(rets/tips),
tips = mean(tips),
gen = mean(gen_no/rets,na.rm=T),
degen = mean(degen_no/rets,na.rm=T),
neu = mean(neu_no/rets,na.rm=T))
recon_dat <- summed %>% filter(recon==T)
complete_dat <- summed %>% filter(recon==F)
nlayers<-11
npoints<-62
hyb_pos<-rep(NA,npoints)
hyb_neu<-rep(NA,npoints)
hyb_neg<-rep(NA,npoints)
i<-0
layer_space<-1/(nlayers-1)
for(div in seq(from=-1,to=1,length.out=nlayers)){
leftover<-1-abs(div)
hyb_zero<-seq(0,leftover,by=layer_space)
leftover_leftover<-leftover-hyb_zero
hyb_plus<- (div+1-hyb_zero)/2
hyb_minus<-hyb_plus-div
nvals<-length(hyb_minus)
hyb_pos[(i+1):(i+nvals)]<-hyb_plus
hyb_neg[(i+1):(i+nvals)]<-hyb_minus
hyb_neu[(i+1):(i+nvals)]<-hyb_zero
i<-i+nvals
}
dat<-data.frame(hyb_pos,hyb_neg,hyb_neu)
rbPal <- colorRampPalette(c('red','blue'))
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
y_vals<-complete_dat$tb
cols <- rbPal(20)[as.numeric(cut(y_vals,breaks = 20))]
{
TernaryPlot(point='le',main='Complete Phylogenies',
btip = expression(nu['+']),
ctip = expression(nu['-']),
atip = expression(nu['0']),
axis.labels = seq(0,1,by=0.1),axis.cex=0.5
)
TernaryPoints(dat[1:59,c(3,1,2)],pch=19,col=cols,cex=2)
}
TernaryPlot(point='le',main='Complete Phylogenies',
btip = expression(nu['+']),
ctip = expression(nu['-']),
atip = expression(nu['0']),
axis.labels = seq(0,1,by=0.1),axis.cex=0.5
)
TernaryPlot(point='le',main='Complete Phylogenies',
btip = expression(nu['+']),
ctip = expression(nu['-']),
atip = expression(nu['0']),
axis.cex=0.5
)
TernaryPlot(point='le',main='Complete Phylogenies',
btip = expression(nu['+']),
ctip = expression(nu['-']),
atip = expression(nu['0']),
axis.labels = NULL,axis.cex=0.5
)
TernaryPlot(point='le',main='Complete Phylogenies',
btip = expression(nu['+']),
ctip = expression(nu['-']),
atip = expression(nu['0']),
axis.labels = FALSE,axis.cex=0.5
)
TernaryPlot(point='le',
btip = expression(nu['+']),
ctip = expression(nu['-']),
atip = expression(nu['0']),
axis.labels = FALSE,axis.cex=0.5
)
TernaryPlot(point='le',
axis.labels = FALSE,axis.cex=0.5)
TernaryPlot(point='le',
axis.labels = FALSE,axis.cex=0.5)
?t.test
?chisq.test()
a<-data.frame(
content= c("Run Simulations/Analyses","Write" ,
"Implement Networks in RevBayes","Implement Method for Computing Mappings","Empirical Analysis","Write",
"Implement Dirichlet Method","Implement Clustering Method","Simulation Analyses","Empirical Analysis","Write",
"Develop Method","Simulation Analysis", "Empirical Analysis","Write",
"Preliminary Examination","Prepare Defense","Defend","Field Trip Course"
),
start=   c("2020-05-01","2020-06-01"  ,
"2020-07-01",   "2020-08-01",    "2020-10-01",    "2020-11-15",
"2021-04-01",    "2021-07-01",    "2021-08-01",    "2022-03-01",    "2021-12-01",
"2022-06-01",    "2022-08-01",    "2022-11-01",    "2022-10-01",
"2020-10-15","2023-02-01","2023-06-01","2022-01-01"),
end=     c("2020-08-01"              ,"2020-12-01"
,"2021-03-01",   "2021-01-1",     "2021-02-01",    "2021-07-01",
"2021-10-01",  "2022-01-01",    "2022-04-01",    "2022-07-01",    "2022-08-01",
"2022-11-01",    "2022-12-01",    "2023-02-01",    "2023-03-01"
,NA,"2023-05-01",NA,"2022-05-01"),
group=c(1,1,5,2,2,2,3,3,3,3,3,4,4,4,4,5,5,5,5),
stringsAsFactors = F
)
library(timevis)
library(timevis)
nrows<-21
a<-data.frame(content=character(nrows),start=character(nrows),end=character(nrows),group=integer(nrows),stringsAsFactors = F)
{
a[1,]<-c("Add Features","2020-11-01","2021-01-01",1)
a[2,]<-c("Writing and Documentation","2020-11-01","2021-03-01",1)
a[3,]<-c("Parent Tree Method","2021-03-01","2021-05-01",2)
a[4,]<-c("Run Simulation Analyses","2021-04-01","2021-07-01",2)
a[5,]<-c("Write","2021-05-01","2021-09-01",2)
a[6,]<-c("Mapping Method","2021-06-01","2021-09-01",3)
a[7,]<-c("Simulation Analyses","2021-07-02","2021-10-01",3)
a[8,]<-c("Empirical Analysis","2021-10-01","2022-01-01",3)
a[9,]<-c("Write","2021-11-01","2022-02-01",3)
a[10,]<-c("Dirichlet Method","2022-02-01","2022-07-01",4)
a[11,]<-c("Simulation Analysis on Dirichlet Method","2022-05-01","2022-10-01",4)
a[12,]<-c("Network Summary Method","2022-07-01","2022-11-01",4)
a[13,]<-c("Simulation Analysis on Summary Method","2022-09-01","2023-02-01",4)
a[14,]<-c("Empirical Analysis","2022-11-01","2023-02-01",4)
a[15,]<-c("Write","2022-11-01","2023-04-01",4)
a[16,]<-c("Preliminary Examination","2020-12-01",NA,5)
a[17,]<-c("Bayesian Stats","2021-01-01","2021-05-01",5)
a[18,]<-c("Field Trip Course","2021-01-01","2021-05-01",5)
a[19,]<-c("Prepare Defense","2023-02-01","2023-05-01",5)
a[20,]<-c("Defense","2023-06-01",NA,5)
a[21,]<-c("Implement Networks in RevBayes","2021-06-01","2021-11-01",5)
}
groups<-data.frame(
id=c(1,2,3,4,5),
content=c("Network Simulator","Trait Evolution","Loci Mappings from Networks","Parent Tree inference ","Other Activities")
)
timevis(data=a,groups=groups)
nrows<-19
a<-data.frame(wp=character(nrows),activity=character(nrows),start_date=character(nrows),end_date=character(nrows),stringsAsFactors = F)
{
a[1,]<-c("1 Network Simulator","1.1 Add Features","2020-11","2021-01")
a[2,]<-c("1 Network Simulator","1.2 Writing and Documentation","2020-11","2021-03")
a[3,]<-c("2 Trait Evolution","2.1 Parent Tree Method","2021-03","2021-05")
a[4,]<-c("2 Trait Evolution","2.2 Run Simulation Analyses","2021-04","2021-07")
a[5,]<-c("2 Trait Evolution","2.3 Write Paper","2021-05","2021-09")
a[6,]<-c("3 Loci Mappings from Networks","3.1 Mapping Method","2021-06","2021-09")
a[7,]<-c("3 Loci Mappings from Networks","3.2 Simulation Analyses","2021-07","2021-10")
a[8,]<-c("3 Loci Mappings from Networks","3.3 Empirical Analysis","2021-10","2022-01")
a[9,]<-c("3 Loci Mappings from Networks","3.4 Write","2021-11","2022-02")
a[10,]<-c("4 Parent Tree inference ","4.1 Dirichlet Method","2022-02","2022-07")
a[11,]<-c("4 Parent Tree inference ","4.2 Simulation Analysis on Dirichlet Method","2022-05","2022-10")
a[12,]<-c("5 Network Summary","5.1 Network Summary Method","2022-07","2022-11")
a[13,]<-c("5 Network Summary","5.2 Simulation Analysis on Summary Method","2022-09","2023-02")
a[14,]<-c("5 Network Summary","5.3 Empirical Analysis","2022-11","2023-02")
a[15,]<-c("5 Network Summary","5.4 Write","2022-11","2023-04")
a[16,]<-c("6 Other Activities","6.1 Prelims & Defense Prep","2020-11","2020-12")
a[17,]<-c("6 Other Activities","6.2 Field Trip & Bayesian Stats","2021-01","2021-05")
a[18,]<-c("6 Other Activities","6.1 Prelims & Defense Prep","2023-02","2023-06")
a[19,]<-c("6 Other Activities","6.6 Implement Networks in RevBayes","2021-06","2021-11")
}
ganttrify(project = a,
project_start_date = "2020-10", by_date = TRUE,
font_family = "Roboto Condensed",size_text_relative = 2 )
install.packages(gnatify)
install.packages('gnatify')
library(gnatify)
?cor.test
?abline
TRUE || NA
setwd("C:/Users/justison/Desktop/repos/SiPhyNetwork/R")
setwd('../')
library(devtools)
build()
document()
document()
build()
build()
build()
release()
release()
build()
release()
setwd("~/hyb_sims/sim_scripts")
load("~/hyb_sims/data/simplex_gen_dist_2/row_54/parameters.Rdata")
library(SiPhyNetwork)
for(rw in 54:nrow(dat)){
file_name<-paste(file_name_base,'/row_',rw,sep = '')
dir.create(file_name)
my_props<-dat[rw,]
hyb_prop_func<-function() my_props
save.image(file=paste(file_name,'/parameters.Rdata',sep=''))
source('./sim_runs.R')
source('./net_analysis.R')
}
