tern.axis.text.L=element_text(hjust=0.15,angle=30),
tern.axis.arrow.text=element_text(size=25,face="bold"),
)+
theme_arrowlarge()+
labs(x = expression(nu['+']), xarrow='$\\nu_+$',
z = expression(nu['0']), zarrow='$\\nu_0$',
y = expression(nu['-']), yarrow='$\\nu_-',
) +
scale_L_continuous(breaks = 0:5 / 5, labels = 0:5/ 5) +
scale_R_continuous(breaks = 0:5 / 5, labels = 0:5/ 5) +
scale_T_continuous(breaks = 0:5 / 5, labels = 0:5/ 5) +
theme_latex(TRUE) +
theme_rotate(210) +
##Just Legend Things
theme(legend.key.size = unit(0.1,'npc'),
legend.text = element_text(size=20),
legend.title= element_text(size=25)
)+
guides(color=guide_legend(title= expression("s = ("*nu['+']*- nu['-']*')')))
line_plot
#function for N(T)
ltt <- function(time,r,s,n0=2){
numer <- r-s
denom1<- (n0*s+r-s)/n0
denom2<-exp(-(r-s)*time)
denom<-denom1*denom2-s
lineages<-numer/denom
return(lineages)
}
times<-seq(0,1,by=0.0002)
divs <-seq(-0.8,0.8,by=0.2)
ltt_vals<-matrix(nrow = length(times)*length(divs),ncol = 3,data = NA)
for(i in 1:length(divs)){
s<-divs[i]
ltt_vals[((i-1)*length(times)+1):((i)*length(times)),1]<-times
ltt_vals[((i-1)*length(times)+1):((i)*length(times)),2]<-ltt(times,12,s)
ltt_vals[((i-1)*length(times)+1):((i)*length(times)),3]<-rep(s,length(times))
}
ltt_vals<-as.data.frame(ltt_vals)
colnames(ltt_vals)<-c('time','lineages','s')
ltt_vals<-ltt_vals[ltt_vals$lineages>=0,]
ltt_vals$s<-(ltt_vals$s)
ltt.plot<-ggplot(data=ltt_vals,mapping=aes(x=time,y=lineages,fill=factor(s,levels = (unique(s)))))+
geom_line() + xlim(0,1) +ylim(0,150) +
geom_line(aes(color=factor(s,levels = rev(unique(s)))),size=4)+
scale_color_manual(values=rev(line_col)) +
theme(
legend.title=element_text(size=15),
legend.key.size = unit(0.1,'npc'),
legend.text = element_text(size=15),
axis.title = element_text(size=15))+
xlab("Time") +
ylab("Number of Lineages N(t)")+
guides(color=guide_legend(title= expression("s = ("*nu['+']*- nu['-']*')')))
ltt.plot
#################################
## Div rate as function of N ####
#################################
library(reshape2)
N_vals<-seq(2,100,by=0.05)
rates<- data.frame(N_vals,hyb_rate=choose(N_vals,2)*1,
spec_rate=N_vals*20,
exct_rate=N_vals*8)
net_rates<-data.frame(N_vals,r=rates$spec_rate-rates$exct_rate)
divs <-seq(-0.8,0.8,by=0.2)
for(div in divs){
net_rates[,as.character(div)]<-rates$hyb_rate*div*2
}
net_rates<-melt(net_rates,id=c('N_vals','r'),variable.name = c('s'))
net_rates$total<-net_rates$r+net_rates$value
rates$tot_rate<- rates$hyb_rate+rates$spec_rate+rates$exct_rate
melty_rates<- data.frame(N=rep(rates$N_vals,4),rates=c(unlist(rates[,2:5])),gps=c(rep('hyb',nrow(rates)),rep('spec',nrow(rates)),rep('exct',nrow(rates)),rep('tot',nrow(rates))))
ggplot(data=melty_rates, mapping = aes(x=N,y=rates,color=gps))+
geom_line(mapping=aes(linetype=gps),size=2)+
scale_color_discrete(name="Rates",labels=c(expression(mu),expression(nu),expression(lambda),'Total'))+
scale_linetype_discrete(name='Rates',labels=c(expression(mu),expression(nu),expression(lambda),'Total'))+
xlab("Number of Lineages")+
ylab("Rate") +
theme(legend.title=element_text(size=15),
legend.key.size = unit(0.1,'npc'),
legend.text = element_text(size=15),
axis.title = element_text(size=15),
legend.key.width = unit(0.1,'npc'),
legend.position = c(0.15,0.7))
ggplot(data=net_rates,mapping = aes(x=N_vals,y=total,fill=s))+
geom_line(mapping=aes(color=s),size=4)+
scale_color_manual(values=(line_col))+
ylim(-200,800)
hyb_div <-rep(NA,nrow(ltt_vals))
spec_div<-rep(NA,nrow(ltt_vals))
ltt_vals$hyb_div<- 2*choose(ltt_vals$lineages,2)*as.numeric(ltt_vals$s)
ltt_vals$bd_div <- ltt_vals$lineages*12
ltt_vals$tot_div<- ltt_vals$hyb_div +ltt_vals$bd_div
##############################################
##### Load Simplex and the recon simplex #####
##############################################
nsims<-61
col_names<- c('rets'	,'tips','level','tree_child','tree_based','fu_stable','normal','gen_no','degen_no','neu_no','recon','row_num')
my_frame<-as.data.frame(matrix(NA,nrow = 20000*nsims,ncol=length(col_names)))
colnames(my_frame)<- col_names
count<-0
file_name_base<-paste(path,'/simplex/',sep='')
rows<-1:nsims
for(rw in rows){
file_name<-paste(file_name_base,'row_',rw,'/phydata.csv',sep = '')
dat <- read.csv(file =file_name)[,-1]
nrows<-nrow(dat)
to_bind<-dat[,11:20]
dat<-dat[,-(11:20)]
colnames(to_bind)<-colnames(dat)
recon<-c(rep(F,nrows),rep(T,nrows))
row_row<-rep(rw,2*nrows)
dat<-rbind(dat,to_bind)
dat<-cbind(dat,recon,row_row)
my_frame[((count*2*nrows)+1):((count+1)*2*nrows),]<-dat
count<-count+1
}
my_frame$rets[is.nan(my_frame$rets)]<-0
my_frame<-as_tibble(my_frame)
summed<- my_frame %>%
group_by(row_num,recon) %>%
summarize(tc = sum(tree_child)/n(),
tb = sum(tree_based)/n(),
fus= sum(fu_stable)/n(),
nor= sum(normal)/n(),
ratio = mean(rets/tips),
tips = mean(tips),
gen_prop = mean((gen_no/rets),na.rm=T),
degen_prop = mean((degen_no/rets),na.rm=T),
neu_prop = mean((neu_no/rets),na.rm=T))
simp_vals<-simp_dat[summed$row_num,] ##Add the hyb prop rates to df
row.names(simp_vals)<-NULL
summed<- cbind(summed,simp_vals)
r_dat <- summed %>% filter(recon==T)
c_dat <- summed %>% filter(recon==F)
rm(summed,my_frame,dat,simp_vals)
##############################################
##### Load Simplex and the recon simplex #####
##############################################
nsims<-61
col_names<- c('rets'	,'tips','level','tree_child','tree_based','fu_stable','normal','gen_no','degen_no','neu_no','recon','row_num')
my_frame<-as.data.frame(matrix(NA,nrow = 20000*nsims,ncol=length(col_names)))
colnames(my_frame)<- col_names
count<-0
file_name_base<-paste(path,'/simplex/',sep='')
rows<-1:nsims
for(rw in rows){
file_name<-paste(file_name_base,'row_',rw,'/phydata.csv',sep = '')
dat <- read.csv(file =file_name)[,-1]
nrows<-nrow(dat)
to_bind<-dat[,11:20]
dat<-dat[,-(11:20)]
colnames(to_bind)<-colnames(dat)
recon<-c(rep(F,nrows),rep(T,nrows))
row_row<-rep(rw,2*nrows)
dat<-rbind(dat,to_bind)
dat<-cbind(dat,recon,row_row)
my_frame[((count*2*nrows)+1):((count+1)*2*nrows),]<-dat
count<-count+1
}
my_frame$rets[is.nan(my_frame$rets)]<-0
my_frame<-as_tibble(my_frame)
summed<- my_frame %>%
group_by(row_num,recon) %>%
summarize(tc = sum(tree_child)/n(),
tb = sum(tree_based)/n(),
fus= sum(fu_stable)/n(),
nor= sum(normal)/n(),
ratio = mean(rets/tips),
tips = mean(tips),
gen_prop = mean((gen_no/rets),na.rm=T),
degen_prop = mean((degen_no/rets),na.rm=T),
neu_prop = mean((neu_no/rets),na.rm=T))
simp_vals<-simp_dat[summed$row_num,] ##Add the hyb prop rates to df
row.names(simp_vals)<-NULL
summed<- cbind(summed,simp_vals)
r_dat <- summed %>% filter(recon==T)
c_dat <- summed %>% filter(recon==F)
my_frame$rets
mean(my_frame$rets)
summed<- my_frame %>%
group_by(row_num,recon) %>%
summarize(tc = sum(tree_child)/n(),
tb = sum(tree_based)/n(),
fus= sum(fu_stable)/n(),
nor= sum(normal)/n(),
ratio = mean(rets/tips),
tips = mean(tips),
rets= mean(rets),
gen_prop = mean((gen_no/rets),na.rm=T),
degen_prop = mean((degen_no/rets),na.rm=T),
neu_prop = mean((neu_no/rets),na.rm=T))
simp_vals<-simp_dat[summed$row_num,] ##Add the hyb prop rates to df
row.names(simp_vals)<-NULL
summed<- cbind(summed,simp_vals)
r_dat <- summed %>% filter(recon==T)
c_dat <- summed %>% filter(recon==F)
r_dat$rets
summed<- my_frame %>% filter(rets!=0) %>%
group_by(row_num,recon) %>%
summarize(tc = sum(tree_child)/n(),
tb = sum(tree_based)/n(),
fus= sum(fu_stable)/n(),
nor= sum(normal)/n(),
ratio = mean(rets/tips),
tips = mean(tips),
rets= mean(rets),
gen_prop = mean((gen_no/rets),na.rm=T),
degen_prop = mean((degen_no/rets),na.rm=T),
neu_prop = mean((neu_no/rets),na.rm=T))
##############################################
##### Load Simplex and the recon simplex #####
##############################################
nsims<-61
col_names<- c('rets'	,'tips','level','tree_child','tree_based','fu_stable','normal','gen_no','degen_no','neu_no','recon','row_num')
my_frame<-as.data.frame(matrix(NA,nrow = 20000*nsims,ncol=length(col_names)))
colnames(my_frame)<- col_names
count<-0
file_name_base<-paste(path,'/simplex/',sep='')
rows<-1:nsims
for(rw in rows){
file_name<-paste(file_name_base,'row_',rw,'/phydata.csv',sep = '')
dat <- read.csv(file =file_name)[,-1]
nrows<-nrow(dat)
to_bind<-dat[,11:20]
dat<-dat[,-(11:20)]
colnames(to_bind)<-colnames(dat)
recon<-c(rep(F,nrows),rep(T,nrows))
row_row<-rep(rw,2*nrows)
dat<-rbind(dat,to_bind)
dat<-cbind(dat,recon,row_row)
my_frame[((count*2*nrows)+1):((count+1)*2*nrows),]<-dat
count<-count+1
}
my_frame$rets[is.nan(my_frame$rets)]<-0
my_frame<-as_tibble(my_frame)
summed<- my_frame %>% filter(rets!=0) %>%
group_by(row_num,recon) %>%
summarize(tc = sum(tree_child)/n(),
tb = sum(tree_based)/n(),
fus= sum(fu_stable)/n(),
nor= sum(normal)/n(),
ratio = mean(rets/tips),
tips = mean(tips),
rets= mean(rets),
gen_prop = mean((gen_no/rets),na.rm=T),
degen_prop = mean((degen_no/rets),na.rm=T),
neu_prop = mean((neu_no/rets),na.rm=T))
simp_vals<-simp_dat[summed$row_num,] ##Add the hyb prop rates to df
row.names(simp_vals)<-NULL
summed<- cbind(summed,simp_vals)
r_dat <- summed %>% filter(recon==T)
c_dat <- summed %>% filter(recon==F)
c_dat$rets
r_dat$rets
r_dat$tc
r_dat$tb
r_dat$nor
##############################################
##### Load Simplex and the recon simplex #####
##############################################
nsims<-61
col_names<- c('rets'	,'tips','level','tree_child','tree_based','fu_stable','normal','gen_no','degen_no','neu_no','recon','row_num')
my_frame<-as.data.frame(matrix(NA,nrow = 20000*nsims,ncol=length(col_names)))
colnames(my_frame)<- col_names
count<-0
file_name_base<-paste(path,'/simplex/',sep='')
rows<-1:nsims
for(rw in rows){
file_name<-paste(file_name_base,'row_',rw,'/phydata.csv',sep = '')
dat <- read.csv(file =file_name)[,-1]
nrows<-nrow(dat)
to_bind<-dat[,11:20]
dat<-dat[,-(11:20)]
colnames(to_bind)<-colnames(dat)
recon<-c(rep(F,nrows),rep(T,nrows))
row_row<-rep(rw,2*nrows)
dat<-rbind(dat,to_bind)
dat<-cbind(dat,recon,row_row)
my_frame[((count*2*nrows)+1):((count+1)*2*nrows),]<-dat
count<-count+1
}
my_frame$rets[is.nan(my_frame$rets)]<-0
my_frame<-as_tibble(my_frame)
summed<- my_frame  %>%
filter(rets!=0) %>%
group_by(row_num,recon) %>%
summarize(tc = sum(tree_child)/n(),
tb = sum(tree_based)/n(),
fus= sum(fu_stable)/n(),
nor= sum(normal)/n(),
ratio = mean(rets/tips),
tips = mean(tips),
rets= mean(rets),
gen_prop = mean((gen_no/rets),na.rm=T),
degen_prop = mean((degen_no/rets),na.rm=T),
neu_prop = mean((neu_no/rets),na.rm=T))
simp_vals<-simp_dat[summed$row_num,] ##Add the hyb prop rates to df
row.names(simp_vals)<-NULL
summed<- cbind(summed,simp_vals)
r_dat <- summed %>% filter(recon==T)
c_dat <- summed %>% filter(recon==F)
rm(summed,my_frame,dat,simp_vals)
nsims<-61
col_names<- c('rets'	,'tips','level','tree_child','tree_based','fu_stable','normal','gen_no','degen_no','neu_no','recon','row_num')
my_frame<-as.data.frame(matrix(NA,nrow = 20000*nsims,ncol=length(col_names)))
colnames(my_frame)<- col_names
count<-0
file_name_base<-paste(path,'/simplex_sampling_frac_0.75/',sep='')
rows<-1:nsims
for(rw in rows){
file_name<-paste(file_name_base,'row_',rw,'/phydata.csv',sep = '')
dat <- read.csv(file =file_name)[,-1]
nrows<-nrow(dat)
to_bind<-dat[,11:20]
dat<-dat[,-(11:20)]
colnames(to_bind)<-colnames(dat)
recon<-c(rep(F,nrows),rep(T,nrows))
row_row<-rep(rw,2*nrows)
dat<-rbind(dat,to_bind)
dat<-cbind(dat,recon,row_row)
my_frame[((count*2*nrows)+1):((count+1)*2*nrows),]<-dat
count<-count+1
}
my_frame$rets[is.nan(my_frame$rets)]<-0
my_frame<-as_tibble(my_frame)
summed<- my_frame %>%
filter(rets!=0) %>%
group_by(row_num,recon) %>%
summarize(tc = sum(tree_child)/n(),
tb = sum(tree_based)/n(),
fus= sum(fu_stable)/n(),
nor= sum(normal)/n(),
ratio = mean(rets/tips),
tips = mean(tips),
gen_prop = mean((gen_no/rets),na.rm=T),
degen_prop = mean((degen_no/rets),na.rm=T),
neu_prop = mean((neu_no/rets),na.rm=T))
simp_vals<-simp_dat[summed$row_num,] ##Add the hyb prop rates to df
row.names(simp_vals)<-NULL
summed<- cbind(summed,simp_vals)
r_i_dat <- summed %>% filter(recon==T)
rm(summed,my_frame,dat)
library(rcartocolor)
library(cowplot)
library(gridGraphics)
pal<-(rcartocolor::carto_pal(7,'Emrld'))
cols_pal<- colorRampPalette(
colors = pal)
point_cols<- cols_pal(20)
dummy_frame<-data.frame(x=1:20,y=1:20,point_cols,point_vals=rep(NA,20))
min_val<-min(c_dat$tb,r_dat$tb,r_i_dat$tb)
max_val<-max(c_dat$tb,r_dat$tb,r_i_dat$tb)
val_breaks<-c(0,seq(min_val,max_val,length.out=20))
dummy_frame$point_vals<-val_breaks[-1]
c_cols  <-point_cols[as.numeric(cut(c_dat$tb,breaks=val_breaks))]
r_cols  <-point_cols[as.numeric(cut(r_dat$tb,breaks=val_breaks))]
r_i_cols<-point_cols[as.numeric(cut(r_i_dat$tb,breaks=val_breaks))]
c_tb_plot  <-make.ggtern.points(c_dat,c_cols)
r_tb_plot  <-make.ggtern.points(r_dat,r_cols)
r_i_tb_plot<-make.ggtern.points(r_i_dat,r_i_cols)
legend_plot<- ggplot(data=dummy_frame,mapping=aes(x=x,y=y,fill=point_vals))+geom_point()+scale_fill_gradientn(colours=point_cols)+
theme(
legend.title=element_text(size=25),
legend.key.size = unit(0.1,'npc'),
legend.text = element_text(size=20))
legend_plot$labels$fill<- "Tree-Based"
legend_plot<-ggdraw(get_legend(legend_plot))
c_tb_plot
r_tb_plot
r_i_tb_plot
legend_plot
grid.arrange(c_tb_plot,r_tb_plot,r_i_tb_plot,ncol=3)
######################################
### Plot FU Stable of 4 core sets ###
######################################
all_vals<-c(c_dat$fus,r_dat$fus,r_i_dat$fus)
summary(all_vals)
min_val<-min(all_vals)
max_val<-max(all_vals)
val_breaks<-c(0,seq(min_val,0.80,length.out=19),1)
dummy_frame$point_vals<-val_breaks[-1]
c_cols  <-point_cols[as.numeric(cut(c_dat$fus,breaks=val_breaks))]
r_cols  <-point_cols[as.numeric(cut(r_dat$fus,breaks=val_breaks))]
r_i_cols<-point_cols[as.numeric(cut(r_i_dat$fus,breaks=val_breaks))]
c_fus_plot  <-make.ggtern.points(c_dat,c_cols)
r_fus_plot  <-make.ggtern.points(r_dat,r_cols)
r_i_fus_plot<-make.ggtern.points(r_i_dat,r_i_cols)
legend_plot<- ggplot(data=dummy_frame,mapping=aes(x=x,y=y,fill=point_vals))+geom_point()+scale_fill_gradientn(colours=point_cols)+
theme(
legend.title=element_text(size=25),
legend.key.size = unit(0.1,'npc'),
legend.text = element_text(size=20))
legend_plot$labels$fill<- "FU Stable"
legend_plot<-ggdraw(get_legend(legend_plot))
c_fus_plot
r_fus_plot
r_i_fus_plot
legend_plot
######################################
### Plot Tree Child of 4 core sets ###
######################################
all_vals<-c(c_dat$tc,r_dat$tc,r_i_dat$tc)
summary(all_vals)
min_val<-min(all_vals)
max_val<-max(all_vals)
val_breaks<-c(0,seq(min_val,0.75,length.out=19),1)
dummy_frame$point_vals<-val_breaks[-1]
c_cols  <-point_cols[as.numeric(cut(c_dat$tc,breaks=val_breaks))]
r_cols  <-point_cols[as.numeric(cut(r_dat$tc,breaks=val_breaks))]
r_i_cols<-point_cols[as.numeric(cut(r_i_dat$tc,breaks=val_breaks))]
c_tc_plot  <-make.ggtern.points(c_dat,c_cols)
r_tc_plot  <-make.ggtern.points(r_dat,r_cols)
r_i_tc_plot<-make.ggtern.points(r_i_dat,r_i_cols)
legend_plot<- ggplot(data=dummy_frame,mapping=aes(x=x,y=y,fill=point_vals))+geom_point()+scale_fill_gradientn(colours=point_cols)+
theme(
legend.title=element_text(size=25),
legend.key.size = unit(0.1,'npc'),
legend.text = element_text(size=20))
legend_plot$labels$fill<- "FU Stable"
legend_plot<-ggdraw(get_legend(legend_plot))
c_tc_plot
r_tc_plot
r_i_tc_plot
r_tc_plot
legend_plot
######################################
### Plot Normal of 4 core sets     ###
######################################
all_vals<-c(c_dat$nor,r_dat$nor,r_i_dat$nor)
summary(all_vals)
min_val<-min(all_vals)
max_val<-max(all_vals)
val_breaks<-c(0,seq(min_val,0.65,length.out=19),1)
dummy_frame$point_vals<-val_breaks[-1]
c_cols  <-point_cols[as.numeric(cut(c_dat$nor,breaks=val_breaks))]
r_cols  <-point_cols[as.numeric(cut(r_dat$nor,breaks=val_breaks))]
r_i_cols<-point_cols[as.numeric(cut(r_i_dat$nor,breaks=val_breaks))]
c_nor_plot  <-make.ggtern.points(c_dat,c_cols)
r_nor_plot  <-make.ggtern.points(r_dat,r_cols)
r_i_nor_plot<-make.ggtern.points(r_i_dat,r_i_cols)
legend_plot<- ggplot(data=dummy_frame,mapping=aes(x=x,y=y,fill=point_vals))+geom_point()+scale_fill_gradientn(colours=point_cols)+
theme(
legend.title=element_text(size=25),
legend.key.size = unit(0.1,'npc'),
legend.text = element_text(size=20))
legend_plot$labels$fill<- "Normal"
legend_plot<-ggdraw(get_legend(legend_plot))
c_nor_plot
r_nor_plot
r_i_nor_plot
legend_plot
fracs<-seq(0.25,1,by=0.025)
nsims<-length(fracs)
col_names<- c('rets'	,'tips','level','tree_child','tree_based','fu_stable','normal','gen_no','degen_no','neu_no','frac')
my_frame<-as.data.frame(matrix(NA,nrow = 10000*nsims,ncol=length(col_names)))
colnames(my_frame)<- col_names
count<-0
file_name_base<-paste(path,'/all_equal_hybs_sampling_frac/',sep='')
for(frac in fracs){
file_name<-paste(file_name_base,'frac_',frac,'/phydata.csv',sep = '')
dat <- read.csv(file =file_name)[,-1]
nrows<-nrow(dat)
row_row<-rep(frac,nrows)
dat<-cbind(dat,row_row)
my_frame[((count*nrows)+1):((count+1)*nrows),]<-dat
count<-count+1
}
my_frame$rets[is.nan(my_frame$rets)]<-0
my_frame<-as_tibble(my_frame)
summed<- my_frame %>%
filter(rets!=0) %>%
group_by(frac) %>%
summarize(tc = sum(tree_child)/n(),
tb = sum(tree_based)/n(),
fus= sum(fu_stable)/n(),
nor= sum(normal)/n(),
ratio = mean(rets/tips),
tips = mean(tips),
rets = mean(rets),
gen_prop = mean((gen_no/rets),na.rm=T),
degen_prop = mean((degen_no/rets),na.rm=T),
neu_prop = mean((neu_no/rets),na.rm=T))
if_dat <- summed
rm(summed,my_frame,dat)
ggplot(data=if_dat, mapping=aes(x=frac))+
geom_point(mapping=aes(y=tb))+
geom_point(mapping=aes(y=fus))+
geom_point(mapping=aes(y=tc))+
geom_point(mapping=aes(y=nor))+
ylim(0.4,1)
ggplot(data=if_dat, mapping=aes(x=frac))+
geom_point(mapping=aes(y=tb))+
geom_point(mapping=aes(y=fus))+
geom_point(mapping=aes(y=tc))+
geom_point(mapping=aes(y=nor))+
ylim(0,1)
ggplot(data=if_dat,mapping=aes(x=rets,y=tc))+geom_point()
1/0.75
1/0.8
simp_dat<-data.frame(hyb_pos,hyb_neg,hyb_neu)
simp_dat
library(xtable)
xtable(simp_dat)
?xtable
rownames(simp_dat)
rownames(simp_dat)<-NULL
#############################
## Table for simplex props ##
#############################
rownames(simp_dat)<-NULL
xtable(simp_dat)
